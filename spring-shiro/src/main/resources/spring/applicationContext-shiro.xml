<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd">

	<description>shiro配置</description>

	<!-- securityManager安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="shiroAuthRealm" />
		<property name="cacheManager" ref="cacheManager" />
		<property name="rememberMeManager" ref="rememberMeManager" />
		<property name="sessionManager" ref="sessionManager" />
	</bean>

	<!-- reaml -->
	<bean id="shiroAuthRealm" class="com.lin.shiro.realm.ShiroAuthRealm" autowire="byName">
		<!-- 名称 -->
		<property name="name" value="authReaml" />
		<!-- 凭证匹配器 -->
		<property name="credentialsMatcher">
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<!-- 散列算法 md5 sha -->
				<property name="hashAlgorithmName" value="md5" />
				<property name="hashIterations" value="2" />
			</bean>
		</property>
	</bean>

	<!-- web.xml中shiro的filter对应的bean -->
	<!-- Shiro 的Web过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<!-- loginUrl认证提交地址，如果没有认证将会请求此地址进行认证，请求此地址将由formAuthenticationFilter进行表单认证 -->
		<property name="loginUrl" value="/user/login" />
		<!-- 认证成功统一跳转到首页，建议不配置，shiro认证成功自动到上一个请求路径 -->
		<!-- <property name="successUrl" value="/" /> -->
		<!-- 通过unauthorizedUrl指定没有权限操作时跳转页面 -->
		<property name="unauthorizedUrl" value="" />
		<!-- 链接过滤列表 -->
		<!-- 过虑器链定义，从上向下顺序执行，一般将/**放在最下边 -->
		<property name="filterChainDefinitionMap">
			<map>
				<!-- /** = anon所有url都可以匿名访问 -->
				<!-- <entry key="/**" value="anon" /> -->
				<!-- 静态资源匿名 -->
				<entry key="/css/**" value="anon" />
				<entry key="/assets/**" value="anon" />
				<entry key="/errors/**" value="anon" />
				<entry key="/fonts/**" value="anon" />
				<entry key="/img/**" value="anon" />
				<entry key="/js/**" value="anon" />
				<!-- 验证码 -->
				<entry key="/captcha" value="anon" />
				<!-- remember me -->
				<entry key="/" value="user" />
				<!-- 登出 -->
				<entry key="/user/loginout" value="logout" />
				<!-- /** = authc 所有url都必须认证通过才可以访问 -->
				<entry key="/**" value="authc" />
			</map>
		</property>
		<property name="filters">
			<map>
				<entry key="authc" value-ref="formAuthenticatingFilter" />
			</map>
		</property>
	</bean>

	<!-- 表单认证器 -->
	<bean id="formAuthenticatingFilter" class="com.lin.shiro.filter.FormAuthenticatingFilter">
		<property name="usernameParam" value="username" />
		<property name="passwordParam" value="password" />
	</bean>

	<!-- ehcache -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:shiro-ehcache.xml" />
	</bean>

	<!-- remmember me -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<property name="cookie" ref="rememberCookie" />
	</bean>
	<bean id="rememberCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<!-- rememberMe是cookie的名字 -->
		<constructor-arg value="rememberMe" />
		<!-- 记住我cookie生效时间30天 -->
		<property name="maxAge" value="2592000" />
	</bean>

	<!-- WEB -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- 设置全局会话超时时间，默认30分钟(1800000) -->
		<property name="globalSessionTimeout" value="1800000" />
		<!-- 是否在会话过期后会调用SessionDAO的delete方法删除会话 默认true -->
		<property name="deleteInvalidSessions" value="true" />
		<!-- 会话验证器调度时间 -->
		<property name="sessionValidationInterval" value="1800000" />
		<!-- 定时检查失效的session -->
		<property name="sessionValidationSchedulerEnabled" value="true" />
		<!-- sessionIdCookie自动的实现,用于重写覆盖容器默认的JSESSIONID -->
		<property name="sessionDAO" ref="redisSessionDao" />
	</bean>

	<!-- redis -->
	<bean id="redisSessionDao" class="com.lin.shiro.redis.RedisSessionDao" autowire="byName" />
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="${redis.pool.maxIdle}" />
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
		<property name="maxWaitMillis" value="${redis.pool.maxWait}" />
	</bean>
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.ip}" />
		<property name="port" value="${redis.port}" />
		<property name="password" value="${redis.password}" />
		<property name="database" value="${redis.database}" />
		<property name="usePool" value="true" />
		<property name="poolConfig" ref="jedisPoolConfig" />
	</bean>
	<bean id="stringRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
		<property name="keySerializer" ref="stringRedisSerializer" />
		<property name="hashKeySerializer" ref="stringRedisSerializer" />
	</bean>
</beans>
